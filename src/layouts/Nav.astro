---
const { title } = Astro.props;
import { Icon } from 'astro-icon/components';
import { ViewTransitions } from 'astro:transitions';

// const slide_right = {
//   forwards: {
//     old: { name: 'slide-out-to-left', duration: '0.3s', easing: 'ease-out' },
//     new: { name: 'slide-in-from-right', duration: '0.3s', easing: 'ease-out' }
//   },
//   backwards: {
//     old: { name: 'slide-out-to-right', duration: '0.3s', easing: 'ease-out' },
//     new: { name: 'slide-in-from-left', duration: '0.3s', easing: 'ease-out' }
//   }
// };

// const slide_left = {
//   forwards: {
//     old: { name: 'slide-out-to-right', duration: '0.3s', easing: 'ease-out' },
//     new: { name: 'slide-in-from-left', duration: '0.3s', easing: 'ease-out' }
//   },
//   backwards: {
//     old: { name: 'slide-out-to-left', duration: '0.3s', easing: 'ease-out' },
//     new: { name: 'slide-in-from-right', duration: '0.3s', easing: 'ease-out' }
//   }
// };

// const determineTransitionType = (oldNavigationEntry, newNavigationEntry) => {
// 	// const currentURL = new URL(oldNavigationEntry.url);
// 	// const destinationURL = new URL(newNavigationEntry.url);

// 	const currentURL = new URL(oldNavigationEntry);
// 	const destinationURL = new URL(newNavigationEntry);


// 	const currentPathname = currentURL.pathname;
// 	const destinationPathname = destinationURL.pathname;

// 	// console.log(currentPathname);
// 	// console.log(destinationPathname);

// 	if (currentPathname === destinationPathname) {
// 		return "reload";
// 	}

// 	const pages = ["/", "/projects", "/tutorials"];
// 	let current = pages.indexOf(currentPathname.replace(/\/$/, ""));
// 	let next = pages.indexOf(destinationPathname.replace(/\/$/, ""));

// 	if (current > next) {
// 		return "backwards";
// 	}

// 	return "forwards";
// }

// const custom_transition = (oldNavigationEntry, newNavigationEntry) => {
//   const direction = determineTransitionType(oldNavigationEntry, newNavigationEntry);

//   if (direction === 'forwards') {
//     return slide_right;
// 	// return {
// 	// 	forwards: slide_right,
// 	// 	backwards: slide_left,
// 	// }
//   } else if (direction === 'backwards') {
//     return slide_left;
// 	// return {
// 	// 	forwards: slide_left,
// 	// 	backwards: slide_right,
// 	// }
//   } else {
//     // For 'reload' or any other case, you might want to use a different animation or none at all
//     return { forwards: {}, backwards: {} };
//   }
// };

// const slideSmall = {
//   forwards: {
//     old: {
//       name: 'slide-out-to-left',
//       duration: '0.2s',
//       easing: 'ease-out',
//       fillMode: 'forwards'
//     },
//     new: {
//       name: 'slide-in-from-right',
//       duration: '0.2s',
//       easing: 'ease-out',
//       fillMode: 'backwards'
//     }
//   },
//   backwards: {
//     old: {
//       name: 'slide-out-to-right',
//       duration: '0.2s',
//       easing: 'ease-out',
//       fillMode: 'forwards'
//     },
//     new: {
//       name: 'slide-in-from-left',
//       duration: '0.2s',
//       easing: 'ease-out',
//       fillMode: 'backwards'
//     }
//   }
// };

const slideSmall = {
  forwards: {
    old: {
      name: 'slideOutSmall',
      duration: '0.2s',
      easing: 'ease-out',
      fillMode: 'forwards'
    },
    new: {
      name: 'slideInSmall',
      duration: '0.2s',
      easing: 'ease-out',
      fillMode: 'backwards'
    }
  },
  backwards: {
    old: {
      name: 'slideOutSmallBack',
      duration: '0.2s',
      easing: 'ease-out',
      fillMode: 'forwards'
    },
    new: {
      name: 'slideInSmallBack',
      duration: '0.2s',
      easing: 'ease-out',
      fillMode: 'backwards'
    }
  }
};
---

<html lang="en" transition:animate={slideSmall}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
		<meta name="generator" content={Astro.generator} />
		<!-- <link rel="expect" href=".header-container" blocking="render" />`` -->
		<title>{title}</title>

		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">

		<ViewTransitions />
	</head>
	<body>
		<div class="header-container">
			<header transition:persist>
				<a class="first" href="/"><img src="/dot32text.webp" alt="Dot32"></a>
				<nav>
					<ul>
						<li><a href="/projects">Projects</a></li>
						<li><a href="/tutorials">Tutorials</a></li>
					</ul>
				</nav>

				<a href="https://discord.gg/Pswb8khdgQ" target="_blank" class="cta"><span class="cta-text">Join my Discord</span><Icon name="ic:baseline-discord" size="1.5em"/></a>
			</header>
		</div>

		<main>
			<slot/>
		</main>

	</body>
</html>

<style is:global>
	/* @import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap'); */

	@font-face {
		font-family: 'Inter Self-Hosted';
		src: url(/Inter-VariableFont_opsz,wght.ttf) format('truetype');
		font-style: normal;
		font-weight: 100 900;

	}

	@font-face {
		font-family: 'Inter Self-Hosted';
		src: url('Inter-Italic-VariableFont_opsz,wght.ttf') format('truetype');
		font-style: italic;
		font-weight: 100 900;
	}

	body {
		margin: 0;
		background-color: #0f0e0e;
		color: white;
		font-family: Inter Self-Hosted, Inter, Arial, Helvetica, sans-serif;
		--brand-colour: #5069cb;
		overflow-x: hidden;
	}

	@view-transition {
		navigation: auto;
		/* types: backwards, forwards, reload; */
	}

	@keyframes slideOutSmall {
        to {
            transform: translateX(-30px);
            opacity: 0;
        }
    }

    @keyframes slideInSmall {
        from {
            transform: translateX(30px);
            opacity: 0;
        }
    }

    @keyframes slideOutSmallBack {
        to {
            transform: translateX(30px);
            opacity: 0;
        }
    }

    @keyframes slideInSmallBack {
        from {
            transform: translateX(-30px);
            opacity: 0;
        }
    }

	/* html:active-view-transition-type(forwards, backwards) {
		body {
			view-transition-name: content;
		}
	}

	.forward::view-transition-old(root) {
		animation-name: slide-out-to-left, fade-out;
	}
	.forward::view-transition-new(root) {
		animation-name: slide-in-from-right, fade-in;
	}

	.backward::view-transition-old(root) {
		animation-name: slide-out-to-right, fade-out;
	}
	.backward::view-transition-new(root) {
		animation-name: slide-in-from-left, fade-in;
	} */

	/* ::view-transition-old(root) {
		animation-name: slide-out-to-left;
	}
	::view-transition-new(root) {
		animation-name: slide-in-from-right;
	} */

	/* Animation styles for forwards type only */
	/* html:active-view-transition-type(forwards) {
		&::view-transition-old(content) {
			animation-name: slide-out-to-left, fade-out;
		}
		&::view-transition-new(content) {
			animation-name: slide-in-from-right, fade-in;
		}
	} */

	/* Animation styles for backwards type only */
	/* html:active-view-transition-type(backwards) {
		&::view-transition-old(content) {
			animation-name: slide-out-to-right, fade-out;
		}
		&::view-transition-new(content) {
			animation-name: slide-in-from-left, fade-in;
		}
	} */

	/* Animation styles for reload type only */
	/* html:active-view-transition-type(reload) {
		&::view-transition-old(root) {
			animation-name: fade-out, scale-down;
		}
		&::view-transition-new(root) {
			animation-delay: 0.25s;
			animation-name: fade-in, scale-up;
		}
	} */

	/* @keyframes slide-out-to-left {
		from {
			transform: translateX(0%);
		}

		to {
			transform: translateX(-100%);
		}
	}

	@keyframes slide-in-from-left {
		from {
			transform: translateX(-100%);
		}

		to {
			transform: translateX(0%);
		}
	}

	@keyframes slide-out-to-right-out {
		from {
			transform: translateX(0%);
		}

		to {
			transform: translateX(100%);
		}
	}

	@keyframes slide-in-from-right {
		from {
			transform: translateX(100%);
		}

		to {
			transform: translateX(0%);
		}
	} */

/* @keyframes slide-in-from-left {
  from {
    translate: -30px 0;
  }
}
@keyframes slide-in-from-right {
  from {
    translate: 30px 0;
  }
}
@keyframes slide-out-to-left {
  to {
    translate: -30px 0;
  }
}
@keyframes slide-out-to-right {
  to {
    translate: 30px 0;
  }
}
@keyframes scale-up {
  from {
    scale: 0;
  }
}
@keyframes scale-down {
  to {
    scale: 0;
  }
}
@keyframes fade-in {
  from {
    opacity: 0;
  }
}
@keyframes fade-out {
  to {
    opacity: 0;
  }
} */
</style>

<style>
	.header-container {
		width: 100%;
		height: 5rem;
		padding-top: 2rem;
		position: absolute;
		top: 0;
	}

	header {
		/* background-color: rgba(23, 23, 23, 0.692); */
		max-width: 1100px;
		margin: auto;
		display: flex;
		justify-content: space-between;
		align-items: center;
		height: 4rem;
		border-radius: 2rem;
		padding-left: 2rem;
		padding-right: 1rem;
		background-color: #00000026;
		border: 1px solid rgba(255, 255, 255, 0.06);
		/* border: 1px solid #2b2b2b; */
		z-index: 40;
		-webkit-backdrop-filter: blur(5px);
		backdrop-filter: blur(5px);
		view-transition-name: header;

		/* Force GPU rendering */
		/* transform: translateZ(0);
		backface-visibility: hidden;
		will-change: transform, opacity; */
		will-change: transform, opacity;
	}

	::view-transition-old(header), ::view-transition-new(header) {
		animation: none;
		transition: none;
	}

	li {
		display: inline;
		position: relative;
	}
	ul {
		margin: 0;
		padding: 0;
		list-style: none;
		display: flex;
		align-items: center;
		gap: 2rem;
	}

	a {
		color: rgba(255, 255, 255, 0.652);
		text-decoration: none;
		font-size: 18px;
		font-weight: 500;
		transition: color;
		transition-duration: 0.2s;
	}

	.first {
		display: flex;
		align-items: center;
		justify-content: center;
		pointer-events: none;
		position: relative;
	}

	.first img {
		height: 75px; /* Set an appropriate size */
		width: auto;
		position: relative;
		/* z-index: 1; Bring it in front if needed */
		pointer-events: none; /* Make the image not clickable */
	}

	.first::after {
		content: '';
		position: absolute;
		top: 50%; /* Start from the middle */
		left: 0;
		right: 0;
		transform: translateY(-50%); /* Center vertically */
		width: 100%;
		height: 2em; /* Set the hitbox height */
		z-index: 10; /* Set a higher z-index for the hitbox */
		background-color: transparent; /* Make sure it's invisible */
		/* background-color: red; */
		pointer-events: all;
	}

	.cta {
		/* background-color: var(--brand-colour); */
		background-color: white;
		color: black;
		/* border: var(--brand-colour) 1px solid; */
		height: 2rem;
		display: flex; /* CSS3 */
		align-items: center; /* Vertical align */
		justify-content: center; /* Horizontal align */
		padding-right: 1em;
		padding-left: 1em;
		border-radius: 1em;
		font-size: 15px;
		font-weight: 600;
	}

	.cta svg {
		margin-left: 1em;
	}

	a:hover {
		color: white;
	}

	.cta:hover {
		color: black;
	}

	/* Hide text on smaller screens */
	@media (max-width: 600px) {
		header {
			padding-right: 0.5rem;
			padding-left: 0.5rem;
			border-radius: 0;
		}
		.header-container {
			padding-top: 0;
		}
		header a {
			font-size: 15px;
		}
		.cta {
			height: 3rem;
			/* background-color: rgba(73, 188, 255, 0.65); */
			width: 3rem;
			padding: 0;
			margin-left: 13.5px;
			margin-right: 13.5px;
			border-radius: 1.5rem;
		}
		.cta span {
			display: none; /* Hide the text */
		}
		.cta svg {
			margin-left: 0;
		}
	}
</style>

<!-- <script is:inline> //client:load

	window.addEventListener("pageswap", async (e) => {
		if (e.viewTransition) {
			console.log("pageswap");

			// @TODO: If destination does not start with basePath, abort the VT

			const transitionType = determineTransitionType(e.activation.from, e.activation.entry);
			// console.log(`pageSwap: ${transitionType}`);
			e.viewTransition.types.add(transitionType);

			// Persist transitionType for browsers that don’t have the Navigation API
			if (!window.navigation) {
				localStorage.setItem("transitionType", transitionType);
			}
		}
	});

	window.addEventListener("pagereveal", async (e) => {
		if (e.viewTransition) {
			console.log("pagereveal");

			// @TODO: If destination does not start with basePath, abort the VT

			// Get transitionType from localStorage or derive it using the NavigationActivationInformation
			let transitionType;
			if (!window.navigation) {
				transitionType = localStorage.getItem("transitionType");
			} else {
				transitionType = determineTransitionType(navigation.activation.from, navigation.activation.entry);
			}

			// console.log(`pageReveal: ${transitionType}`);
			e.viewTransition.types.add(transitionType);
		}
	});

	// document.addEventListener('astro:before-preparation', event => {
	// 	// const originalLoader = event.loader;
	// 	// event.loader = async function() {
	// 	// 	const { startSpinner } = await import('./spinner.js');
	// 	// 	const stop = startSpinner();
	// 	// 	await originalLoader();
	// 	// 	stop();
	// 	// };
	// 	// console.log(event);

	// 	// const transitionType = determineTransitionType(event.from, event.to);
	// 	// event.viewTransition.types.add(transitionType);

	// 	console.log(event.from.pathname);
	// 	console.log(event.to.pathname);

	// 	const transitionClass = determineTransitionType(event.from, event.to);
	// 	console.log(transitionClass);

	// 	document.documentElement.classList.add(transitionClass);
  	// });

	// document.addEventListener('astro:after-preparation', () => {
	// 	// document.classList.remove('forwards');
	// 	// document.classList.remove('backwards');
  	// });

	const determineTransitionType = (oldNavigationEntry, newNavigationEntry) => {
		// const currentURL = new URL(oldNavigationEntry.url);
		// const destinationURL = new URL(newNavigationEntry.url);

		const currentURL = new URL(oldNavigationEntry);
		const destinationURL = new URL(newNavigationEntry);


		const currentPathname = currentURL.pathname;
		const destinationPathname = destinationURL.pathname;

		console.log(currentPathname);
		console.log(destinationPathname);

		if (currentPathname === destinationPathname) {
			return "reload";
		}

		const pages = ["/", "/projects", "/tutorials"];
		current = pages.indexOf(currentPathname.replace(/\/$/, ""));
		next = pages.indexOf(destinationPathname.replace(/\/$/, ""));

		if (current > next) {
			return "backwards";
		}

		return "forwards";
	}

</script> -->

<!-- <script type="speculationrules">
	{
	  "prerender": [{
		"where": {
		  "and": [
			{ "href_matches": "/*" }
		  ]
		},
		"eagerness": "moderate"
	  }]
	}
</script> -->

<script is:inline>

const pages = ["/", "/projects", "/tutorials"];

// Change direction of
document.addEventListener('astro:before-preparation', (e) => {
  const fromIdx = pages.indexOf(e.from.pathname);
  const toIdx = pages.indexOf(e.to.pathname);

  e.direction = fromIdx === -1 || toIdx === -1
	? e.direction
	: fromIdx < toIdx ? 'forward' : 'back';
});

// If it's the same page, dont navigate
document.addEventListener('astro:page-load', () => {
  const links = document.querySelector('nav').querySelectorAll('a');
  links.forEach(link => {
    link.addEventListener('click', (e) => {
      if (link.pathname === window.location.pathname) {
        e.preventDefault();
      }
    });
  });
});
</script>
