---
const { title } = Astro.props;
import { Icon } from 'astro-icon/components';
---

<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<div class="header-container">
			<header>
				<a class="first" href="/"><img src="/dot32text.webp" alt="Dot32"></a>
				<nav>
					<ul>
						<li><a href="/projects">Projects</a></li>
						<li><a href="/tutorials">Tutorials</a></li>
					</ul>
				</nav>

				<a href="https://discord.gg/Pswb8khdgQ" target="_blank" class="cta">Join my Discord<Icon name="ic:baseline-discord" size="1.5em"/></a>
			</header>
		</div>

		<slot />

	</body>
</html>

<style is:global>
	/* @import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap'); */

	@font-face {
		font-family: 'Inter Self-Hosted';
		src: url(/Inter-VariableFont_opsz,wght.ttf) format('truetype');
		font-style: normal;
		font-weight: 100 900;

	}

	@font-face {
		font-family: 'Inter Self-Hosted';
		src: url('Inter-Italic-VariableFont_opsz,wght.ttf') format('truetype');
		font-style: italic;
		font-weight: 100 900;
	}

	body {
		margin: 0;
		background-color: #0f0e0e;
		color: white;
		font-family: Inter Self-Hosted;
		--brand-colour: #5069cb;
	}

	@view-transition {
		navigation: auto;
		/* types: backwards, forwards, reload; */
	}


	html:active-view-transition-type(forwards, backwards) {
		body {
			view-transition-name: content;
		}
	}

	/* ::view-transition-old(root) {
		animation-name: slide-out-to-left;
	}
	::view-transition-new(root) {
		animation-name: slide-in-from-right;
	} */

	/* Animation styles for forwards type only */
	html:active-view-transition-type(forwards) {
		&::view-transition-old(content) {
			animation-name: slide-out-to-left;
		}
		&::view-transition-new(content) {
			animation-name: slide-in-from-right;
		}
	}

	/* Animation styles for backwards type only */
	html:active-view-transition-type(backwards) {
		&::view-transition-old(content) {
			animation-name: slide-out-to-right;
		}
		&::view-transition-new(content) {
			animation-name: slide-in-from-left;
		}
	}

	/* Animation styles for reload type only */
	html:active-view-transition-type(reload) {
		&::view-transition-old(root) {
			animation-name: fade-out, scale-down;
		}
		&::view-transition-new(root) {
			animation-delay: 0.25s;
			animation-name: fade-in, scale-up;
		}
	}

	/* @keyframes slide-out-to-left {
		from {
			transform: translateX(0%);
		}

		to {
			transform: translateX(-100%);
		}
	}

	@keyframes slide-in-from-left {
		from {
			transform: translateX(-100%);
		}

		to {
			transform: translateX(0%);
		}
	}

	@keyframes slide-out-to-right-out {
		from {
			transform: translateX(0%);
		}

		to {
			transform: translateX(100%);
		}
	}

	@keyframes slide-in-from-right {
		from {
			transform: translateX(100%);
		}

		to {
			transform: translateX(0%);
		}
	} */

@keyframes slide-in-from-left {
  from {
    translate: -100vw 0;
  }
}
@keyframes slide-in-from-right {
  from {
    translate: 100vw 0;
  }
}
@keyframes slide-out-to-left {
  to {
    translate: -100vw 0;
  }
}
@keyframes slide-out-to-right {
  to {
    translate: 100vw 0;
  }
}
@keyframes scale-up {
  from {
    scale: 0;
  }
}
@keyframes scale-down {
  to {
    scale: 0;
  }
}
@keyframes fade-in {
  from {
    opacity: 0;
  }
}
@keyframes fade-out {
  to {
    opacity: 0;
  }
}
</style>

<style>
	.header-container {
		width: 100%;
		height: 5rem;
		padding-top: 2rem;
		position: absolute;
		top: 0;
	}

	header {
		/* background-color: rgba(23, 23, 23, 0.692); */
		max-width: 1100px;
		margin: auto;
		display: flex;
		justify-content: space-between;
		align-items: center;
		height: 4rem;
		border-radius: 2rem;
		padding-left: 2rem;
		padding-right: 1rem;
		background-color: #00000026;
		border: 1px solid hsla(0, 0%, 100%, .06);
		/* border: 1px solid #2b2b2b; */
		z-index: 40;
		-webkit-backdrop-filter: blur(5px);
		backdrop-filter: blur(5px);
		view-transition-name: header;
	}

	li {
		display: inline;
		position: relative;
	}
	ul {
		margin: 0;
		padding: 0;
		list-style: none;
		display: flex;
		align-items: center;
		gap: 2rem;
	}

	a {
		color: rgba(255, 255, 255, 0.652);
		text-decoration: none;
		font-size: 18px;
		font-weight: 500;
		transition: color;
		transition-duration: 0.2s;
	}

	.first {
		display: flex;
		align-items: center;
		justify-content: center;
		pointer-events: none;
		position: relative;
	}

	.first img {
		height: 75px; /* Set an appropriate size */
		width: auto;
		position: relative;
		/* z-index: 1; Bring it in front if needed */
		pointer-events: none; /* Make the image not clickable */
	}

	.first::after {
		content: '';
		position: absolute;
		top: 50%; /* Start from the middle */
		left: 0;
		right: 0;
		transform: translateY(-50%); /* Center vertically */
		width: 100%;
		height: 2em; /* Set the hitbox height */
		z-index: 10; /* Set a higher z-index for the hitbox */
		background-color: transparent; /* Make sure it's invisible */
		/* background-color: red; */
		pointer-events: all;
	}

	.cta {
		/* background-color: var(--brand-colour); */
		background-color: white;
		color: black;
		/* border: var(--brand-colour) 1px solid; */
		height: 2rem;
		display: flex; /* CSS3 */
		align-items: center; /* Vertical align */
		justify-content: center; /* Horizontal align */
		padding-right: 1em; 
		padding-left: 1em; 
		border-radius: 1em;
		font-size: 15px;
		font-weight: 600;
	}

	.cta svg {
		margin-left: 1em;
	}

	a:hover {
		color: white;
	}

	.cta:hover {
		color: black;
	}
</style>

<script client:load>

	window.addEventListener("pageswap", async (e) => {
		if (e.viewTransition) {
			console.log("pageswap");

			// @TODO: If destination does not start with basePath, abort the VT

			const transitionType = determineTransitionType(e.activation.from, e.activation.entry);
			// console.log(`pageSwap: ${transitionType}`);
			e.viewTransition.types.add(transitionType);

			// Persist transitionType for browsers that donâ€™t have the Navigation API
			if (!window.navigation) {
				localStorage.setItem("transitionType", transitionType);
			}
		}
	});

	window.addEventListener("pagereveal", async (e) => {
		if (e.viewTransition) {
			console.log("pagereveal");

			// @TODO: If destination does not start with basePath, abort the VT

			// Get transitionType from localStorage or derive it using the NavigationActivationInformation
			let transitionType;
			if (!window.navigation) {
				transitionType = localStorage.getItem("transitionType");
			} else {
				transitionType = determineTransitionType(navigation.activation.from, navigation.activation.entry);
			}

			// console.log(`pageReveal: ${transitionType}`);
			e.viewTransition.types.add(transitionType);
		}
	});

	const determineTransitionType = (oldNavigationEntry, newNavigationEntry) => {
		const currentURL = new URL(oldNavigationEntry.url);
		const destinationURL = new URL(newNavigationEntry.url);

		const currentPathname = currentURL.pathname;
		const destinationPathname = destinationURL.pathname;

		console.log(currentPathname);
		console.log(destinationPathname);

		if (currentPathname === destinationPathname) {
			return "reload";
		}

		const pages = ["/", "/projects", "/tutorials"];
		current = pages.indexOf(currentPathname);
		next = pages.indexOf(destinationPathname);

		if (current > next) {
			return "backwards";
		}

		return "forwards";
	}

</script>